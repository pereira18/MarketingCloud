import { UserAttributeLookup, UserAttributeReference} from "common";

export class JourneyBuilderTriggerUtils {
    static DEFAULT_CATALOG_OBJECT = "Product";
    static DEFAULT_CATALOG_OBJECT_ATTRIBUTES = ["id", "name", "imageUrl", "url", "price"];
    static MAX_RECOMMENDATIONS = 8;

    // ================================== Catalog Localization =====================================
    // If you use catalog localization and would like to receive localized catalog data
    // in Marketing Cloud, change the value of 'IS_CATALOG_LOCALIZED' to true.
    // =============================================================================================
    static IS_CATALOG_LOCALIZED = false;

    static getFlatItems(context: CampaignComponentContext, catalogObject: string, ids: string[]): any[] {
        const locale: string = context.locale || "";

        return context.services.catalog
            .findItems(catalogObject, ids)
            .map((item) => item.toFlatJSON(
                JourneyBuilderTriggerUtils.DEFAULT_CATALOG_OBJECT_ATTRIBUTES,
                JourneyBuilderTriggerUtils.IS_CATALOG_LOCALIZED ? locale : null
            ));
    }

    static getUserAttributeValue(attributeId: string, user: User) {
        return (user?.attributes?.[attributeId] as Attribute|undefined)?.value?.toString() || "";
    }

    static getTriggerContext(context: CampaignComponentContext): any {
        const result = {};

        if (context.trigger?.type) {
            result["Trigger_Type"] = context.trigger.type;
            let trigger;
            switch (context.trigger.type) {
                case "SegmentLeave":
                case "SegmentJoin":
                    trigger = context.trigger as SegmentTrigger;
                    result["Trigger_Segment"] = trigger.segmentName; 
                    break;
                case "EventAction":
                    trigger = context.trigger as ActionTrigger;
                    result["Trigger_Action"] = trigger.action;                     
                    break;
                default:
                    trigger = context.trigger as CatalogTrigger;
                    const items: any[] = [];

                    if (trigger.itemIdsByType) {
                        Object.keys(trigger.itemIdsByType).forEach((catalogObject) => {
                            items.push(...JourneyBuilderTriggerUtils.getFlatItems(
                                context, catalogObject, trigger.itemIdsByType[catalogObject]
                            ));
                        });
                    }

                    try {
                        result["Trigger_Catalog_Items"] = JSON.stringify(items);
                    } catch (ex) {}
                    break;
            }
        }

        return result;
    }
}

export class JourneyBuilderTriggerPayload {

    @title(" ")
    @header("User Attributes")
    @headerSubtitle(`After you select user attributes, create a field for each user attribute in the event data
        extension in Marketing Cloud. Data extension field names must match user attribute names.`)
    @lookupOptions(() => new UserAttributeLookup())
    attributes: UserAttributeReference[];

    getPayload(context: CampaignComponentContext) {
        const triggerContext = JourneyBuilderTriggerUtils.getTriggerContext(context);
        
        const result = {
            "Campaign": context.campaignId,
            "Experience": context.experienceId,
            ...triggerContext
        };

        this.attributes?.forEach((attr) => {
            result[attr.id] = JourneyBuilderTriggerUtils.getUserAttributeValue(attr.id, context.user);
        });
        
        return result;
    }
}

export class JourneyBuilderTriggerTemplate implements CampaignTemplateComponent {
    
    templateConfig: JourneyBuilderTriggerPayload = new JourneyBuilderTriggerPayload();

    run(context: CampaignComponentContext) {
        return this.templateConfig.getPayload(context);
    }
}
